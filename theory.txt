npx : node package manager
    > it install package in node and then execute
npm : node package executor
    > it doesnot install package in node, besides in directly execute them

How to create
  1. Derect
    > npx create-react-app name // create-react-app is utility( also called software)
    
  2. with vite
    > npm create vite@latest

How to start(run) app
  1. Direct 
    > npm run start / npm start

  2. with vite
    > npm install
    > npm run dev


You write code between these two <></> : which is known as fragmantation

Component:
  > You have to named your component with first capital compulsary
  > Component return function which is basically your html code

jsx: javascript + html


JS bundler:
 > every react use bundler(i.e babel)
 > the do their work behind the seen
 > check syntax, upgrade syntax, converting syntax into html
 > parsing of all syntax, is done by this

<a href='https://google.com' target='_blank'>Click Me to Visit Google</a>

above html is converted into bellow object

const reactElement = {
    type: 'a',
    props: {
        href: 'https://google.com',
        target: '_blank'
    },
    children: 'Click Me to Visit Google'
}


variable:
 > if you want to use variable you have to use it in curly braces
 {name} --> this will gives value of name
 {name} --> this is called expression, evaluated expression, which direct gives its value, cannot write codes in it


react open source library
  > https://github.com/facebook/react/tree/main


useState
  > update the state in react
  > it update state(value) of any variable in each place where it is used 


vertual dom:
 > javascript can make its own dom and do any task in it (update elements and all)


React Fiber Architecture
 > https://github.com/acdlite/react-fiber-architecture/blob/master/README.md
 > React Fiber is an ongoing reimplementation of React's core algorithm. It is the culmination of over two years of research by the React team.
 > The goal of React Fiber is 
      > to increase its suitability for areas like animation, layout, and gestures. 
 > Its headline feature is 
      > incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.
> Other key features include :
      > the ability to pause, abort, or reuse work as new updates come in; 
      > the ability to assign priority to different types of updates; 
      > and new concurrency primitives.

What is reconciliation? : algorithm to compare two trees (browser tree or react tree)
  > reconciliation : The algorithm React uses to diff one tree with another to determine which parts need to be changed.
  > update : A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM."
  > A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.

Although Fiber is a ground-up rewrite of the reconciler, the high-level algorithm described in the React docs will be largely the same. The key points are:

  > Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.
  > Diffing of lists is performed using keys. Keys should be "stable, predictable, and unique."

The key points are:
  > In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.
  > Different types of updates have different priorities — an animation update needs to complete more quickly than, say, an update from a data store.
  > A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows the framework (React) to be smart and make those decisions for you.

What is a fiber?
  > We're about to discuss the heart of React Fiber's architecture. 
  > Fibers are a much lower-level abstraction than application developers typically think about. 
